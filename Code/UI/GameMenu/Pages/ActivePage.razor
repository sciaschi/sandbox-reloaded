@using Sandbox.UI

@if (!GameManager.InGame())
{
    <div>No game. Error. We shouldn't be here.</div>
    return;
}

<root style="flex-direction: column;">
    <div class="navbar">
        <div class="left">
            <a class="button" href="/"> Home </a>
            <span class="block">&gt;</span>
            <span class="block">Current Game</span>
        </div>
        <div class="right">
        </div>
    </div>
    <section class="inset" style="flex-direction: row;">
        <div style="flex-grow: 1; flex-shrink: 0; flex-direction: column;">
            <h2>Server Information</h2>
            <div style="flex-direction: column; margin: 30px 30px;">
                <div>Server: @Networking.ServerName</div>
                <div>Players: @Connection.All.Count() / @Networking.MaxPlayers</div>
                <div>Map: @Networking.MapName</div>
                <!-- <div>Is Listen Server: @Game.IsListenServer</div> -->
            </div>
            <h2>Current Players</h2>
            <div style="flex-direction: column; margin: 30px 30px;">
                @foreach (var player in Connection.All)
                {
                    <div>
                        @player.DisplayName - @player.SteamId
                    </div>
                }
            </div>
        </div>
        <div style="flex-shrink: 0;">
            <section class="nogrow">
                <h2>Map</h2>
                <MapButton MapIdent=@Networking.MapName OnClicked="@OnMapClicked" />
            </section>
        </div>
    </section>
    <div class="navbar">
        <div class="left">
            <span class="button" onclick=@LeaveGame>Leave Server</span>
        </div>
        <div class="right">
            <span class="button primary" onclick=@ReturnToGame>Return To Game</span>
        </div>
    </div>
</root>

@code
{
    public string Tab { get; set; } = "map";

    public void ReturnToGame()
    {
        GameMenuPanel.ToggleVisibility();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Connection.All.Count(), Networking.MapName);
    }

    public override void Tick()
    {
        base.Tick();

        if (!IsVisible)
            return;

        if (!Game.InGame)
        {
            this.Navigate("/");
        }
    }

    void LeaveGame()
    {
        Networking.Disconnect();
        Scene.LoadFromFile("scenes/menu.scene");
    }

    void OnMapClicked()
    {
        Game.Overlay.ShowPackageSelector("type:map sort:popular", OnMapSelected);
    }

    void OnMapSelected(Package map)
    {
        if (!Networking.IsHost)
            return;

        LaunchArguments.Map = map.FullIdent;

        var options = new SceneLoadOptions();
        options.SetScene("scenes/game.scene");

        Game.ChangeScene(options);
    }
}
