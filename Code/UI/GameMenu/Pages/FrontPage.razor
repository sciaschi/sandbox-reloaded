@using Sandbox.UI
@using Sandbox.Modals

<root style="flex-direction: column;">
    <div class="game-title">Sandbox Classic</div>
    <div class="controls">
        @if ( GameManager.InGame() )
        {
            <a class="button" href="/active">Current Game</a>
            <a class="button" onclick=@LeaveGame>Leave Game</a>
            <span style="height: 20px;"></span>
        }
        else
        {
            <a class="button" onclick="@CreateNewGame">Create Game</a>
        }
        <a class="button" onclick="@OpenServerList">Find a Game</a>
        <a class="button" onclick="@Game.Overlay.ShowBinds">Settings</a>
        <span style="height: 20px;"></span>
        <a class="button" @onclick=@Game.Close>Quit</a>
    </div>
</root>

@code
{
    void LeaveGame()
    {
        Networking.Disconnect();
        Game.ActiveScene.LoadFromFile("scenes/menu.scene");
    }

    void CreateNewGame()
    {
        FindRootPanel().AddChild<CreateGameModal>();

        /*
        var options = new Sandbox.Modals.GameCreateModalOptions();
        options.Cookie = $"{Game.Menu.Package.FullIdent}.serverconfig";

        options.ModalTitle = "Create Game";
        options.MapFilter = "type:map sort:trending";
        options.Default.Map = "facepunch.construct23";
        options.Default.GameTitle = $"{Game.Menu.Package.Title} Server";

        options.OnStartGame = (setup) =>
        {
            Game.Menu.StartServerAsync(setup.MaxPlayers, setup.GameTitle, setup.Map);
            };

        Game.Overlay.ShowCreateGame(options);
        */
    }

    void OpenServerList()
    {
        Game.Overlay.ShowServerList(new ServerListConfig("softsplit.sandbox"));

        /*
        var options = new Sandbox.Modals.ServerListModalOptions();
        options.TargetGame = Game.Menu.Package.FullIdent;
        options.OnSelected = (server) =>
        {
            Game.Menu.ConnectToServer(server.SteamId);
        };

        Game.Overlay.ShowServerList(options);
        */
    }
}
