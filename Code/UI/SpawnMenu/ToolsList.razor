@using Sandbox;
@using Sandbox.UI;
@inherits Panel


<root>

	<div class="left">
        <VerticalMenu Value="@(CurrentMode?.GetType())"  class="menuinner">
            <Options>
                @foreach (var group in Game.TypeLibrary.GetTypes<ToolMode>().GroupBy(x => x.Group))
                {
                    @if ( !string.IsNullOrWhiteSpace( group.Key ) )
                    {
                        <h2>@group.Key</h2>
                    }

                    @foreach (var type in group.OrderBy(x => x.Title))
                    {
                        if (type.IsAbstract) continue;

                        <MenuOption Text="@type.Title" Icon="@type.Icon" @onclick="@(() => SwitchMode(type))" Value="@type.TargetType"></MenuOption>
                    }
                }
            </Options>
        </VerticalMenu>
	</div>

    <div class="body menuinner">
		<ControlSheet PropertyFilter="@FilterProperties" Target="@GetCurrentMode()"></ControlSheet>
	</div>

</root>

@code
{
    ToolMode CurrentMode => Player.FindLocalPlayer()?.GetWeapon<Toolgun>()?.GetCurrentMode();

    protected override int BuildHash() => HashCode.Combine(CurrentMode);

	bool IsActiveMode( TypeDescription t )
	{
		var localPlayer = Player.FindLocalPlayer();
		var toolgun = localPlayer?.GetWeapon<Toolgun>();
		if (!toolgun.IsValid()) return false;

		return toolgun.GetCurrentMode()?.GetType() == t.TargetType;
	}

	void SwitchMode(TypeDescription t)
	{
		var localPlayer = Player.FindLocalPlayer();
		var toolgun = localPlayer?.GetWeapon<Toolgun>();
		if (!toolgun.IsValid()) return;

		localPlayer.SwitchWeapon<Toolgun>();
		toolgun.SetToolMode(t.ClassName);
	}

	ToolMode GetCurrentMode()
	{
		var localPlayer = Player.FindLocalPlayer();
		var toolgun = localPlayer?.GetWeapon<Toolgun>();
		return toolgun?.GetCurrentMode();
	}

	static bool FilterProperties(SerializedProperty o)
	{
		if (o.PropertyType is null) return false;
		if (o.PropertyType.IsAssignableTo(typeof(Delegate))) return false;

		if (o.IsMethod) return true;
		if (!o.HasAttribute<PropertyAttribute>()) return false;

		return true;
	}
}
