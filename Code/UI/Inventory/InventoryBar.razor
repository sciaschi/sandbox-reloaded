@using Sandbox.UI

@inherits PanelComponent

<root class="inventory-bar">
	@for (int i = 0; i < 9; i++)
	{
		var slotIndex = i; // Capture loop variable
		var weaponInSlot = GetWeaponForSlot(slotIndex);
		
		<InventoryIcon TargetCarriable="@weaponInSlot"  SlotNumber="@(slotIndex + 1)" class="@(IsActiveWeapon(weaponInSlot) ? "active" : "")" />
	}
</root>

@code
{
    private Player player;
    private PlayerInventory inventory;

    protected override void OnUpdate()
    {
        player = Player.FindLocalPlayer();
        if (!player.IsValid())
            return;

        inventory = player?.GetComponent<PlayerInventory>();
        if (!inventory.IsValid())
            return;

        if (inventory.ActiveWeapon is Physgun physgun && physgun.BeamRenderer.Enabled)
            return;

		// Handle input for weapon switching
		if (Input.Pressed("slot1")) SetActiveSlot(0);
		if (Input.Pressed("slot2")) SetActiveSlot(1);
		if (Input.Pressed("slot3")) SetActiveSlot(2);
		if (Input.Pressed("slot4")) SetActiveSlot(3);
		if (Input.Pressed("slot5")) SetActiveSlot(4);
		if (Input.Pressed("slot6")) SetActiveSlot(5);
		if (Input.Pressed("slot7")) SetActiveSlot(6);
		if (Input.Pressed("slot8")) SetActiveSlot(7);
		if (Input.Pressed("slot9")) SetActiveSlot(8);

		if (Input.MouseWheel != 0) 
		{
			SwitchActiveSlot((int)-Input.MouseWheel.y);
		}

        StateHasChanged();
	}

	private BaseCarriable GetWeaponForSlot(int slotIndex)
	{
		if (inventory?.Weapons == null) return null;
		
		// First, try to get a weapon that's explicitly assigned to this slot
		var weaponInSlot = inventory.Weapons.Where(w => w.InventorySlot == slotIndex).FirstOrDefault();
		if (weaponInSlot != null) return weaponInSlot;
		
		// If no weapon is explicitly assigned to this slot, 
		// distribute available weapons across the 9 slots in order
		var weapons = inventory.Weapons.OrderBy(w => w.InventorySlot).ToList();
		if (slotIndex < weapons.Count)
		{
			return weapons[slotIndex];
		}
		
		return null;
	}

	private bool IsActiveWeapon(BaseCarriable weapon)
	{
		return inventory?.ActiveWeapon == weapon && weapon != null;
	}

	private void SetActiveSlot(int slotIndex)
	{
		if (!player.IsValid() || !inventory.IsValid())
			return;

		// Find weapon for the specified slot using the same logic as GetWeaponForSlot
		var weaponInSlot = GetWeaponForSlot(slotIndex);
		if (!weaponInSlot.IsValid())
			return;

		// Don't switch if already active
		if (inventory.ActiveWeapon == weaponInSlot)
			return;

		inventory.SwitchWeapon(weaponInSlot);
	}

	private void SwitchActiveSlot(int delta)
	{
		if (!inventory.IsValid()) return;

		var weapons = inventory.Weapons;
		if (weapons.Count == 0) return;

		// Find current weapon index
		int currentIndex = -1;
		if (inventory.ActiveWeapon.IsValid())
		{
			for (int i = 0; i < weapons.Count; i++)
			{
				if (weapons[i] == inventory.ActiveWeapon)
				{
					currentIndex = i;
					break;
				}
			}
		}

		// Calculate next weapon index
		int nextIndex = currentIndex + delta;
		while (nextIndex < 0) nextIndex += weapons.Count;
		while (nextIndex >= weapons.Count) nextIndex -= weapons.Count;

		// Switch to the weapon at the next index
		if (nextIndex >= 0 && nextIndex < weapons.Count)
		{
			inventory.SwitchWeapon(weapons[nextIndex]);
		}
	}
}
