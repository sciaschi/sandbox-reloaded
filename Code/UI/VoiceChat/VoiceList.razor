@using Sandbox.UI

@inherits PanelComponent

<root>
    @foreach (var entry in voiceEntries.Values)
    {
        <VoiceEntry @key="entry.SteamId" Friend="@entry.Friend" Level="@entry.Level" TimeSincePlayed="@entry.TimeSincePlayed" />
    }
</root>

@code
{
    public static VoiceList Current { get; internal set; }

    private Dictionary<long, VoiceEntryData> voiceEntries = new();

    protected override void OnTreeFirstBuilt()
    {
        base.OnTreeFirstBuilt();
        Current = this;
    }

    protected override void OnDestroy()
    {
        if (Current == this)
        {
            Current = null;
        }

        base.OnDestroy();
    }

    public void OnVoicePlayed(long steamId, float level)
    {
        if (!voiceEntries.TryGetValue(steamId, out var entryData))
        {
            entryData = new VoiceEntryData
            {
                Friend = new Friend(steamId),
                SteamId = steamId
            };

            voiceEntries[steamId] = entryData;
        }

        entryData.Level = level;
        entryData.TimeSincePlayed = 0f;
        
        StateHasChanged();
    }

    protected override void OnUpdate()
    {
        base.OnUpdate();

        // Clean up old entries
        var toRemove = new List<long>();
        foreach (var kvp in voiceEntries)
        {
            kvp.Value.TimeSincePlayed += Time.Delta;
            if (kvp.Value.TimeSincePlayed > 2.0f)
            {
                toRemove.Add(kvp.Key);
            }
        }

        if (toRemove.Count > 0)
        {
            foreach (var key in toRemove)
            {
                voiceEntries.Remove(key);
            }

            StateHasChanged();
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(voiceEntries.Count, voiceEntries.Values.Sum(x => x.Level.GetHashCode()));
    }

    public class VoiceEntryData
    {
        public Friend Friend { get; set; }
        public long SteamId { get; set; }
        public float Level { get; set; }
        public float TimeSincePlayed { get; set; }
    }
}
