@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Sandbox

<root>
	
    <div class="container">

        <div class="spawnmenuleft">

            <div class="tabs">

                @foreach (var t in tabs)
                {
                    var type = Game.TypeLibrary.GetType(t.GetType());

                    var c = activeTab == t ? "active" : "";

                    <div class="@c" @onclick=@(() => SwitchTab(t))>@type.Title</div>
                }

            </div>

            <div class="body" @ref="TabContainer">
                
            </div>

        </div>

        <div class="spawnmenuright">

            <div class="tabs">

                <div class="active">Tools</div>
                <div>Options</div>

            </div>

            <div class="body">

                <ToolsList></ToolsList>

            </div>


        </div>

    </div>

</root>

@code
{
    bool stickOpen = false;

    Panel activeTab;

    Panel TabContainer;

    List<Panel> tabs = new List<Panel>();

    public void BuildTabs()
    {
        foreach ( var p in Game.TypeLibrary.GetTypes<ISpawnMenuTab>().OrderBy(x => x.Order).ThenBy(x => x.Title) ) 
        {  
            if (p.IsAbstract) continue;

            var panel = p.Create<Panel>();
            TabContainer.AddChild(panel);

            tabs.Add(panel);
        }

        SwitchTab(tabs.FirstOrDefault());
    }

    protected override void OnTreeFirstBuilt()
    {
        base.OnTreeFirstBuilt();

        if ( TabContainer.IsValid() )
        {
            BuildTabs();
        }
    }

    protected override void OnUpdate()
    {
        Sandbox.Utility.AssetPreview.RunJobs();

        stickOpen = stickOpen || (Sandbox.UI.InputFocus.Current?.Ancestors.Contains(Panel) ?? false);

        if ( stickOpen && Input.Pressed("menu") ) stickOpen = false;

        SetClass("open", stickOpen || Input.Down("menu"));

        base.OnUpdate();
    }

    void SwitchTab( Panel tab )
    {
        activeTab = tab;
        StateHasChanged();

        foreach( var t in tabs )
        {
            t.SetClass("active", t == tab);
            t.SetClass("hidden", t != tab);
        }
    }



}
