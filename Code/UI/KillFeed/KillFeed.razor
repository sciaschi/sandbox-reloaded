@using Sandbox.UI

@inherits PanelComponent

<root>
    @foreach (var entry in entries)
    {
        <KillFeedEntry LeftText="@entry.LeftText" RightText="@entry.RightText" MethodText="@entry.MethodText" LeftSteamId="@entry.LeftSteamId" RightSteamId="@entry.RightSteamId" />
    }
</root>

@code
{
    public static KillFeed Current;

    private List<KillFeedEntryData> entries = new();

    protected override void OnStart()
    {
        base.OnStart();
        Current = this;
    }

    protected override void OnUpdate()
    {
        base.OnUpdate();

        // Remove expired entries
        bool needsUpdate = false;
        for (int i = entries.Count - 1; i >= 0; i--)
        {
            if (entries[i].TimeSinceBorn > 6)
            {
                entries.RemoveAt(i);
                needsUpdate = true;
            }
        }

        // Trigger UI update if we removed any entries
        if (needsUpdate)
        {
            StateHasChanged();
        }
    }

    /// <summary>
    /// Add entry locally on the client
    /// </summary>
    public virtual Panel AddEntry(long attackerSteamId, string attackerName, long victimSteamId, string victimName, string weaponName)
    {
        var entryData = new KillFeedEntryData
        {
            LeftSteamId = attackerSteamId,
            LeftText = attackerName,
            RightSteamId = victimSteamId,
            RightText = victimName,
            MethodText = weaponName,
            TimeSinceBorn = 0 // Reset the timer
        };

        entries.Add(entryData);
        StateHasChanged();

        // Limit the number of entries to prevent memory issues
        while (entries.Count > 10)
        {
            entries.RemoveAt(0);
        }

        return Panel.Children.LastOrDefault();
    }

    protected override int BuildHash()
    {
        // Include the time component so the UI updates as entries age
        var timeHash = entries.Count > 0 ? (int)(entries.Max(e => e.TimeSinceBorn) * 10) : 0;
        return HashCode.Combine(entries.Count, entries.LastOrDefault()?.GetHashCode() ?? 0, timeHash);
    }

    public class KillFeedEntryData
    {
        public long LeftSteamId { get; set; }
        public string LeftText { get; set; } = "";
        public long RightSteamId { get; set; }
        public string RightText { get; set; } = "";
        public string MethodText { get; set; } = "";
        public RealTimeSince TimeSinceBorn { get; set; } = 0;

        public override int GetHashCode()
        {
            return HashCode.Combine(LeftSteamId, LeftText, RightSteamId, RightText, MethodText);
        }
    }
}
